#!/bin/bash -exu

function main() {
  source /var/vcap/jobs/postgres/bin/pgconfig.sh

  if [ ! -d "${STORE_DIR}" ]; then
    echo "ERROR: storage directory doesn't exist"
    echo "Please add persistent disk to this job"
    exit 1
  fi

  if [ -d "${DATA_DIR_OLD}" -a -f "${DATA_DIR_OLD}/postgresql.conf" ]; then
    mkdir -p ${DATA_DIR_PREVIOUS}
    chown -R vcap:vcap "${DATA_DIR_PREVIOUS}"
    chmod 700 "${DATA_DIR_PREVIOUS}"
    mkdir -p "${DATA_DIR}"
    chown -R vcap:vcap "${DATA_DIR}"
    chmod 700 "${DATA_DIR}"

    pushd "${DATA_DIR_PREVIOUS}" > /dev/null
      if [ -a "postgresql.conf" ]; then
        rm -r *
      fi
    popd > /dev/null

    pushd "${DATA_DIR_OLD}" > /dev/null
      cp -r * "${DATA_DIR}"
    popd > /dev/null

    pushd "${DATA_DIR_OLD}" > /dev/null
      cp -r * "${DATA_DIR_PREVIOUS}"
    popd > /dev/null

    pushd "${DATA_DIR_OLD}" > /dev/null
      rm -r *
    popd > /dev/null
  fi

  if [ ! -f "${DATA_DIR}/postgresql.conf" ]; then
    # initdb creates data directories
    "${PACKAGE_DIR}/bin/initdb" -E utf8 --locale en_US.UTF-8 -D "${DATA_DIR}"

    mkdir -p "${DATA_DIR}/pg_log"
  fi

  cp "${JOB_DIR}/config/postgresql.conf" "${JOB_DIR}/config/pg_hba.conf" "${DATA_DIR}"

  echo "Starting PostgreSQL: "
  "${PACKAGE_DIR}/bin/pg_ctl" -o "-h ${HOST} -p ${PORT}" \
    -w start -D "${DATA_DIR}" -l "${DATA_DIR}/pg_log/startup.log"

  echo "PostgreSQL started successfully"

  create_roles
  create_databases
}

function pgexec() {
  local database
  database="${1}"

  local command
  command="${2}"

  "${PACKAGE_DIR}/bin/psql" \
    -U "vcap" \
    -p "${PORT}" \
    -d "${database}" \
    -c "${command}"
}

function create_roles() {
  echo "Creating roles..."
  <% p("databases.roles", []).each do |role| %>
    echo "Trying to create role <%= role["name"] %>..."
    set +e
    # TODO remove unused roles automatically
    # Default permissions are: nosuperuser nologin inherit nocreatedb.
    # Will fail if role already exists, which is OK
    pgexec postgres "CREATE ROLE \"<%= role["name"] %>\""
    set -e

    echo "Setting password for role <%= role["name"] %>..."
    pgexec postgres "ALTER ROLE \"<%= role["name"] %>\" WITH LOGIN PASSWORD '<%= role["password"] %>'"

    <% if role["permissions"] %>
      echo "Adding permissions <%= role["permissions"].join(' ') %> for role <%= role["name"] %>..."
      pgexec postgres "ALTER ROLE \"<%= role["name"] %>\" WITH <%= role["permissions"].join(' ') %>"
    <% end %>
  <% end %>
}

function create_databases() {
  echo "Creating databases..."
  <% p("databases.databases", []).each do |database| %>
    echo "Trying to create database <%= database["name"] %>..."
    set +e
    "${PACKAGE_DIR}/bin/createdb" "<%= database["name"] %>" -p ${PORT}
    set -e

    <% if database["citext"] %>
      echo "Trying to install citext..."
      set +e
      pgexec "<%= database["name"] %>" "CREATE EXTENSION citext"
      pgexec "<%= database["name"] %>" "CREATE EXTENSION citext FROM UNPACKAGED"
      set -e
    <% end %>

    echo "Enabling pgcrypto extension..."
    pgexec "<%= database["name"] %>" "CREATE EXTENSION IF NOT EXISTS pgcrypto"


    <% if p("databases.collect_statement_statistics") %>
      echo "Enabling pg_stat_statements extension..."
      pgexec "<%= database["name"] %>" "CREATE EXTENSION IF NOT EXISTS pg_stat_statements"
    <% end %>

    <% if database["run_on_every_startup"] %>
      <% database["run_on_every_startup"].each do |query| %>
        pgexec "<%= database["name"] %>" "<%= query %>"
      <% end %>
    <% end %>
  <% end %>
}

main
